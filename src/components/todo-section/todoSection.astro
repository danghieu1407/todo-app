---
import { CreateTaskDialog } from '@/components/custom-dialog/CreateTaskDialog';
import { EditTaskDialog } from '@/components/custom-dialog/EditTaskDialog';
import { supabase } from '@/lib/supabase';

// Fetch tasks for the authenticated user
const { data: tasks, error } = await supabase.from('tasks').select('*');

if (error) {
  console.error("Error fetching tasks:", error.message);
}
---
<div class="lg:col-span-2">
    <div class="bg-white rounded-xl shadow-sm border p-6">
        <div class="flex items-center justify-between mb-6">
            <div class="flex items-center space-x-2">
                <svg
                    class="w-5 h-5 text-coral"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                >
                    <path
                        fill-rule="evenodd"
                        d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                        clip-rule="evenodd"></path>
                </svg>
                <h3 class="text-lg font-semibold text-gray-800">To-Do</h3>
            </div>
            <div class="flex items-center space-x-4">
                <span class="text-sm text-gray-500">20 June â€¢ Today</span>
                <!-- Enhanced Create Task Dialog -->
                <CreateTaskDialog 
                    client:load
                    onTaskCreated={() => {
                        // You can add logic here to refresh the tasks list
                        window.location.reload(); // Simple approach
                        // Or use a more sophisticated state management approach
                    }}
                />
            </div>
        </div>

        <div class="space-y-4" id="tasks-list">
            <!-- Dynamically render tasks -->
            {tasks && tasks.length > 0 ? (
                tasks.map((task) => (
                    <div
                        class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow"
                    >
                        <div class="flex items-start space-x-4">
                            <div class={`w-2 h-2 ${
                                task.priority === 'extreme' ? 'bg-red-500' :
                                task.priority === 'moderate' ? 'bg-blue-500' :
                                'bg-green-500'
                            } rounded-full mt-2`}></div>
                            <div class="flex-1">
                                <h4 class="font-medium text-gray-800 mb-2">
                                    {task.title}
                                </h4>
                                <p class="text-sm text-gray-600 mb-3">
                                    {task.description}
                                </p>
                                <div class="flex items-center justify-between">
                                    <div
                                        class="flex items-center space-x-4 text-xs text-gray-500"
                                    >
                                        <span>Priority: <span class={
                                            task.priority === 'extreme' ? 'text-red-500 font-medium' :
                                            task.priority === 'moderate' ? 'text-blue-500 font-medium' :
                                            'text-green-500 font-medium'
                                        }>{
                                            task.priority === 'extreme' ? 'ðŸ”¥ Extreme' :
                                            task.priority === 'moderate' ? 'âš¡ Moderate' :
                                            'ðŸŒ± Low'
                                        }</span></span>
                                        <span>Status: <span class={
                                            task.status === 'pending' ? 'text-red-500' :
                                            task.status === 'in progress' ? 'text-blue-500' :
                                            'text-green-500'
                                        }>{
                                            task.status.charAt(0).toUpperCase() + task.status.slice(1)
                                        }</span></span>
                                        <span>Created on: {new Date(task.created_at).toLocaleDateString()}</span>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <EditTaskDialog
                    client:load

                                            task={task} 
                                            onTaskUpdated={() => { window.location.reload(); }} 
                                        />
                                        <button class="text-red-500 hover:text-red-700 text-xs font-medium">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                            {task.image_url && (
                                <img
                                    src={task.image_url}
                                    alt="Task image"
                                    class="w-15 h-15 rounded-lg object-cover"
                                />
                            )}
                        </div>
                    </div>
                ))
            ) : (
                <div class="text-center py-8">
                    <p class="text-gray-500">You have no tasks yet. Create one!</p>
                </div>
            )}
        </div>
    </div>
</div>

<style>
    /* Add some custom animations for better UX */
    .hover\:shadow-md:hover {
        transition: box-shadow 0.2s ease-in-out;
    }
    
    /* Custom scrollbar for task list if needed */
    #tasks-list::-webkit-scrollbar {
        width: 4px;
    }
    
    #tasks-list::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 2px;
    }
    
    #tasks-list::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 2px;
    }
    
    #tasks-list::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
</style>